# NewsApp/views.py
from django.utils import timezone
from django.db.models import Q  # üëà Import Q object
from rest_framework import viewsets, permissions, status
from rest_framework.decorators import action
from rest_framework.response import Response

from .models import NewsArticle
from .serializers import NewsArticleSerializer
# Import c√°c l·ªõp Permission m·ªõi v√† c≈©
from AuthApp.permissions import IsAdminUser, IsEditorUser, IsAuthorOrAdmin


class NewsArticleViewSet(viewsets.ModelViewSet):
    queryset = NewsArticle.objects.all().order_by('-created_at')
    serializer_class = NewsArticleSerializer

    def get_queryset(self):
        """
        [QUY·ªÄN XEM D·ªÆ LI·ªÜU]
        T√πy ch·ªânh danh s√°ch b√†i vi·∫øt tr·∫£ v·ªÅ d·ª±a tr√™n vai tr√≤ ng∆∞·ªùi d√πng.
        """
        user = self.request.user

        # 1. N·∫øu ng∆∞·ªùi d√πng kh√¥ng ƒëƒÉng nh·∫≠p, ch·ªâ xem b√†i ƒë√£ duy·ªát
        if not user.is_authenticated:
            return self.queryset.filter(status=NewsArticle.Status.APPROVED)

        # 2. N·∫øu ng∆∞·ªùi d√πng l√† Admin, xem t·∫•t c·∫£
        if user.role == 'ADMIN':
            return self.queryset

        # 3. N·∫øu ng∆∞·ªùi d√πng l√† Editor, xem b√†i c·ªßa m√¨nh (m·ªçi tr·∫°ng th√°i) HO·∫∂C b√†i ƒë√£ duy·ªát c·ªßa ng∆∞·ªùi kh√°c
        if user.role == 'EDITOR':
            return self.queryset.filter(
                Q(author=user) | Q(status=NewsArticle.Status.APPROVED)
            ).distinct()  # D√πng distinct() ƒë·ªÉ tr√°nh tr√πng l·∫∑p

        # 4. M·∫∑c ƒë·ªãnh cho c√°c vai tr√≤ kh√°c (VD: Visitor ƒë√£ ƒëƒÉng nh·∫≠p), ch·ªâ xem b√†i ƒë√£ duy·ªát
        return self.queryset.filter(status=NewsArticle.Status.APPROVED)

    def get_permissions(self):
        """
        [QUY·ªÄN H√ÄNH ƒê·ªòNG]
        G√°n quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông (create, update, approve...).
        """
        # Ai c≈©ng c√≥ th·ªÉ g·ªçi API xem danh s√°ch/chi ti·∫øt. get_queryset() ·ªü tr√™n ƒë√£ lo vi·ªác l·ªçc d·ªØ li·ªáu.
        if self.action in ['list', 'retrieve']:
            self.permission_classes = [permissions.AllowAny]
        # Editor v√† Admin c√≥ th·ªÉ t·∫°o b√†i
        elif self.action == 'create':
            self.permission_classes = [IsAdminUser | IsEditorUser]
        # Admin c√≥ th·ªÉ duy·ªát ho·∫∑c t·ª´ ch·ªëi
        elif self.action in ['approve', 'reject']:
            self.permission_classes = [IsAdminUser]
        # T√°c gi·∫£ ho·∫∑c Admin c√≥ th·ªÉ s·ª≠a/x√≥a
        elif self.action in ['update', 'partial_update', 'destroy']:
            self.permission_classes = [IsAuthorOrAdmin]
        # M·∫∑c ƒë·ªãnh c·∫ßn x√°c th·ª±c
        else:
            self.permission_classes = [permissions.IsAuthenticated]

        return super().get_permissions()

    def perform_create(self, serializer):
        """T·ª± ƒë·ªông g√°n t√°c gi·∫£ l√† ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p."""
        serializer.save(author=self.request.user)

    @action(detail=True, methods=['post'])
    def approve(self, request, pk=None):
        article = self.get_object()
        article.status = NewsArticle.Status.APPROVED
        article.approved_by = request.user
        article.approved_at = timezone.now()
        article.save()
        return Response(self.get_serializer(article).data, status=status.HTTP_200_OK)

    @action(detail=True, methods=['post'])
    def reject(self, request, pk=None):
        article = self.get_object()
        article.status = NewsArticle.Status.REJECTED
        article.approved_by = None
        article.approved_at = None
        article.save()
        return Response(self.get_serializer(article).data, status=status.HTTP_200_OK)